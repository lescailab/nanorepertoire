#!/usr/bin/env python
# This script processes input FASTQ data, translating sequences with Biopython.
# It has been refactored and parallelized using multiprocessing for better performance.

import sys
import re
import multiprocessing
from Bio.Seq import translate
from multiprocessing import Pool

# Regex patterns for matching sequences
startseq = r'(ATGGCTCAA|ATGGCTCAG|ATGGCCCAA|ATGGCCCAG|ATGGCACAA|ATGGCACAG|ATGGCGCAA|ATGGCGCAG|' \
    r'GTTCAATTA|GTTCAATTG|GTTCAACTT|GTTCAACTC|GTTCAACTA|GTTCAACTG|GTTCAGTTA|GTTCAGTTG|' \
    r'GTTCAGCTT|GTTCAGCTC|GTTCAGCTA|GTTCAGCTG|GTCCAATTA|GTCCAATTG|GTCCAACTT|GTCCAACTC|' \
    r'GTCCAACTA|GTCCAACTG|GTCCAGTTA|GTCCAGTTG|GTCCAGCTT|GTCCAGCTC|GTCCAGCTA|GTCCAGCTG|' \
    r'GTACAATTA|GTACAATTG|GTACAACTT|GTACAACTC|GTACAACTA|GTACAACTG|GTACAGTTA|GTACAGTTG|' \
    r'GTACAGCTT|GTACAGCTC|GTACAGCTA|GTACAGCTG|GTGCAATTA|GTGCAATTG|GTGCAACTT|GTGCAACTC|' \
    r'GTGCAACTA|GTGCAACTG|GTGCAGTTA|GTGCAGTTG|GTGCAGCTT|GTGCAGCTC|GTGCAGCTA|GTGCAGCTG|' \
    r'GAAGTTCAA|GAAGTTCAG|GAAGTCCAA|GAAGTCCAG|GAAGTACAA|GAAGTACAG|GAAGTGCAA|GAAGTGCAG|' \
    r'GAGGTTCAA|GAGGTTCAG|GAGGTCCAA|GAGGTCCAG|GAGGTACAA|GAGGTACAG|GAGGTGCAA|GAGGTGCAG|' \
    r'TTACAATTA|TTACAATTG|TTACAACTT|TTACAACTC|TTACAACTA|TTACAACTG|TTACAGTTA|TTACAGTTG|' \
    r'TTACAGCTT|TTACAGCTC|TTACAGCTA|TTACAGCTG|TTGCAATTA|TTGCAATTG|TTGCAACTT|TTGCAACTC|' \
    r'TTGCAACTA|TTGCAACTG|TTGCAGTTA|TTGCAGTTG|TTGCAGCTT|TTGCAGCTC|TTGCAGCTA|TTGCAGCTG|' \
    r'CTTCAATTA|CTTCAATTG|CTTCAACTT|CTTCAACTC|CTTCAACTA|CTTCAACTG|CTTCAGTTA|CTTCAGTTG|' \
    r'CTTCAGCTT|CTTCAGCTC|CTTCAGCTA|CTTCAGCTG|CTCCAATTA|CTCCAATTG|CTCCAACTT|CTCCAACTC|' \
    r'CTCCAACTA|CTCCAACTG|CTCCAGTTA|CTCCAGTTG|CTCCAGCTT|CTCCAGCTC|CTCCAGCTA|CTCCAGCTG|' \
    r'CTACAATTA|CTACAATTG|CTACAACTT|CTACAACTC|CTACAACTA|CTACAACTG|CTACAGTTA|CTACAGTTG|' \
    r'CTACAGCTT|CTACAGCTC|CTACAGCTA|CTACAGCTG|CTGCAATTA|CTGCAATTG|CTGCAACTT|CTGCAACTC|' \
    r'CTGCAACTA|CTGCAACTG|CTGCAGTTA|CTGCAGTTG|CTGCAGCTT|CTGCAGCTC|CTGCAGCTA|CTGCAGCTG|' \
    r'CAAGTTCAA|CAAGTTCAG|CAAGTCCAA|CAAGTCCAG|CAAGTACAA|CAAGTACAG|CAAGTGCAA|CAAGTGCAG|' \
    r'CAGGTTCAA|CAGGTTCAG|CAGGTCCAA|CAGGTCCAG|CAGGTACAA|CAGGTACAG|CAGGTGCAA|CAGGTGCAG)'

endseq = r'(ACTGTTTCTTCT|ACTGTTTCTTCC|ACTGTTTCTTCA|ACTGTTTCTTCG|ACTGTTTCTAGT|ACTGTTTCTAGC|ACTGTTTCCTCT|ACTGTTTCCTCC|' \
    r'ACTGTTTCCTCA|ACTGTTTCCTCG|ACTGTTTCCAGT|ACTGTTTCCAGC|ACTGTTTCATCT|ACTGTTTCATCC|ACTGTTTCATCA|ACTGTTTCATCG|' \
    r'ACTGTTTCAAGT|ACTGTTTCAAGC|ACTGTTTCGTCT|ACTGTTTCGTCC|ACTGTTTCGTCA|ACTGTTTCGTCG|ACTGTTTCGAGT|ACTGTTTCGAGC|' \
    r'ACTGTTAGTTCT|ACTGTTAGTTCC|ACTGTTAGTTCA|ACTGTTAGTTCG|ACTGTTAGTAGT|ACTGTTAGTAGC|ACTGTTAGCTCT|ACTGTTAGCTCC|' \
    r'CTGTTAGCTCA|ACTGTTAGCTCG|ACTGTTAGCAGT|ACTGTTAGCAGC|ACTGTCTCTTCT|ACTGTCTCTTCC|ACTGTCTCTTCA|ACTGTCTCTTCG|' \
    r'ACTGTCTCTAGT|ACTGTCTCTAGC|ACTGTCTCCTCT|ACTGTCTCCTCC|ACTGTCTCCTCA|ACTGTCTCCTCG|ACTGTCTCCAGT|ACTGTCTCCAGC|' \
    r'ACTGTCTCATCT|ACTGTCTCATCC|ACTGTCTCATCA|ACTGTCTCATCG|ACTGTCTCAAGT|ACTGTCTCAAGC|ACTGTCTCGTCT|ACTGTCTCGTCC|' \
    r'ACTGTCTCGTCA|ACTGTCTCGTCG|ACTGTCTCGAGT|ACTGTCTCGAGC|ACTGTCAGTTCT|ACTGTCAGTTCC|ACTGTCAGTTCA|ACTGTCAGTTCG|' \
    r'ACTGTCAGTAGT|ACTGTCAGTAGC|ACTGTCAGCTCT|ACTGTCAGCTCC|ACTGTCAGCTCA|ACTGTCAGCTCG|ACTGTCAGCAGT|ACTGTCAGCAGC|' \
    r'ACTGTATCTTCT|ACTGTATCTTCC|ACTGTATCTTCA|ACTGTATCTTCG|ACTGTATCTAGT|ACTGTATCTAGC|ACTGTATCCTCT|ACTGTATCCTCC|' \
    r'ACTGTATCCTCA|ACTGTATCCTCG|ACTGTATCCAGT|ACTGTATCCAGC|ACTGTATCATCT|ACTGTATCATCC|ACTGTATCATCA|ACTGTATCATCG|' \
    r'ACTGTATCAAGT|ACTGTATCAAGC|ACTGTATCGTCT|ACTGTATCGTCC|ACTGTATCGTCA|ACTGTATCGTCG|ACTGTATCGAGT|ACTGTATCGAGC|' \
    r'ACTGTAAGTTCT|ACTGTAAGTTCC|ACTGTAAGTTCA|ACTGTAAGTTCG|ACTGTAAGTAGT|ACTGTAAGTAGC|ACTGTAAGCTCT|ACTGTAAGCTCC|' \
    r'ACTGTAAGCTCA|ACTGTAAGCTCG|ACTGTAAGCAGT|ACTGTAAGCAGC|ACTGTGTCTTCT|ACTGTGTCTTCC|ACTGTGTCTTCA|ACTGTGTCTTCG|' \
    r'ACTGTGTCTAGT|ACTGTGTCTAGC|ACTGTGTCCTCT|ACTGTGTCCTCC|ACTGTGTCCTCA|ACTGTGTCCTCG|ACTGTGTCCAGT|ACTGTGTCCAGC|' \
    r'ACTGTGTCATCT|ACTGTGTCATCC|ACTGTGTCATCA|ACTGTGTCATCG|ACTGTGTCAAGT|ACTGTGTCAAGC|ACTGTGTCGTCT|ACTGTGTCGTCC|' \
    r'ACTGTGTCGTCA|ACTGTGTCGTCG|ACTGTGTCGAGT|ACTGTGTCGAGC|ACTGTGAGTTCT|ACTGTGAGTTCC|ACTGTGAGTTCA|ACTGTGAGTTCG|' \
    r'ACTGTGAGTAGT|ACTGTGAGTAGC|ACTGTGAGCTCT|ACTGTGAGCTCC|ACTGTGAGCTCA|ACTGTGAGCTCG|ACTGTGAGCAGT|ACTGTGAGCAGC|' \
    r'ACCGTTTCTTCT|ACCGTTTCTTCC|ACCGTTTCTTCA|ACCGTTTCTTCG|ACCGTTTCTAGT|ACCGTTTCTAGC|ACCGTTTCCTCT|ACCGTTTCCTCC|' \
    r'ACCGTTTCCTCA|ACCGTTTCCTCG|ACCGTTTCCAGT|ACCGTTTCCAGC|ACCGTTTCATCT|ACCGTTTCATCC|ACCGTTTCATCA|ACCGTTTCATCG|' \
    r'ACCGTTTCAAGT|ACCGTTTCAAGC|ACCGTTTCGTCT|ACCGTTTCGTCC|ACCGTTTCGTCA|ACCGTTTCGTCG|ACCGTTTCGAGT|ACCGTTTCGAGC|' \
    r'ACCGTTAGTTCT|ACCGTTAGTTCC|ACCGTTAGTTCA|ACCGTTAGTTCG|ACCGTTAGTAGT|ACCGTTAGTAGC|ACCGTTAGCTCT|ACCGTTAGCTCC|' \
    r'ACCGTTAGCTCA|ACCGTTAGCTCG|ACCGTTAGCAGT|ACCGTTAGCAGC|ACCGTCTCTTCT|ACCGTCTCTTCC|ACCGTCTCTTCA|ACCGTCTCTTCG|' \
    r'ACCGTCTCTAGT|ACCGTCTCTAGC|ACCGTCTCCTCT|ACCGTCTCCTCC|ACCGTCTCCTCA|ACCGTCTCCTCG|ACCGTCTCCAGT|ACCGTCTCCAGC|' \
    r'ACCGTCTCATCT|ACCGTCTCATCC|ACCGTCTCATCA|ACCGTCTCATCG|ACCGTCTCAAGT|ACCGTCTCAAGC|ACCGTCTCGTCT|ACCGTCTCGTCC|' \
    r'ACCGTCTCGTCA|ACCGTCTCGTCG|ACCGTCTCGAGT|ACCGTCTCGAGC|ACCGTCAGTTCT|ACCGTCAGTTCC|ACCGTCAGTTCA|ACCGTCAGTTCG|' \
    r'ACCGTCAGTAGT|ACCGTCAGTAGC|ACCGTCAGCTCT|ACCGTCAGCTCC|ACCGTCAGCTCA|ACCGTCAGCTCG|ACCGTCAGCAGT|ACCGTCAGCAGC|' \
    r'ACCGTATCTTCT|ACCGTATCTTCC|ACCGTATCTTCA|ACCGTATCTTCG|ACCGTATCTAGT|ACCGTATCTAGC|ACCGTATCCTCT|ACCGTATCCTCC|' \
    r'ACCGTATCCTCA|ACCGTATCCTCG|ACCGTATCCAGT|ACCGTATCCAGC|ACCGTATCATCT|ACCGTATCATCC|ACCGTATCATCA|ACCGTATCATCG|' \
    r'ACCGTATCAAGT|ACCGTATCAAGC|ACCGTATCGTCT|ACCGTATCGTCC|ACCGTATCGTCA|ACCGTATCGTCG|ACCGTATCGAGT|ACCGTATCGAGC|' \
    r'ACCGTAAGTTCT|ACCGTAAGTTCC|ACCGTAAGTTCA|ACCGTAAGTTCG|ACCGTAAGTAGT|ACCGTAAGTAGC|ACCGTAAGCTCT|ACCGTAAGCTCC|' \
    r'ACCGTAAGCTCA|ACCGTAAGCTCG|ACCGTAAGCAGT|ACCGTAAGCAGC|ACCGTGTCTTCT|ACCGTGTCTTCC|ACCGTGTCTTCA|ACCGTGTCTTCG|' \
    r'ACCGTGTCTAGT|ACCGTGTCTAGC|ACCGTGTCCTCT|ACCGTGTCCTCC|ACCGTGTCCTCA|ACCGTGTCCTCG|ACCGTGTCCAGT|ACCGTGTCCAGC|' \
    r'ACCGTGTCATCT|ACCGTGTCATCC|ACCGTGTCATCA|ACCGTGTCATCG|ACCGTGTCAAGT|ACCGTGTCAAGC|ACCGTGTCGTCT|ACCGTGTCGTCC|' \
    r'ACCGTGTCGTCA|ACCGTGTCGTCG|ACCGTGTCGAGT|ACCGTGTCGAGC|ACCGTGAGTTCT|ACCGTGAGTTCC|ACCGTGAGTTCA|ACCGTGAGTTCG|' \
    r'ACCGTGAGTAGT|ACCGTGAGTAGC|ACCGTGAGCTCT|ACCGTGAGCTCC|ACCGTGAGCTCA|ACCGTGAGCTCG|ACCGTGAGCAGT|ACCGTGAGCAGC|' \
    r'ACAGTTTCTTCT|ACAGTTTCTTCC|ACAGTTTCTTCA|ACAGTTTCTTCG|ACAGTTTCTAGT|ACAGTTTCTAGC|ACAGTTTCCTCT|ACAGTTTCCTCC|' \
    r'ACAGTTTCCTCA|ACAGTTTCCTCG|ACAGTTTCCAGT|ACAGTTTCCAGC|ACAGTTTCATCT|ACAGTTTCATCC|ACAGTTTCATCA|ACAGTTTCATCG|' \
    r'ACAGTTTCAAGT|ACAGTTTCAAGC|ACAGTTTCGTCT|ACAGTTTCGTCC|ACAGTTTCGTCA|ACAGTTTCGTCG|ACAGTTTCGAGT|ACAGTTTCGAGC|' \
    r'ACAGTTAGTTCT|ACAGTTAGTTCC|ACAGTTAGTTCA|ACAGTTAGTTCG|ACAGTTAGTAGT|ACAGTTAGTAGC|ACAGTTAGCTCT|ACAGTTAGCTCC|' \
    r'ACAGTTAGCTCA|ACAGTTAGCTCG|ACAGTTAGCAGT|ACAGTTAGCAGC|ACAGTCTCTTCT|ACAGTCTCTTCC|ACAGTCTCTTCA|ACAGTCTCTTCG|' \
    r'ACAGTCTCTAGT|ACAGTCTCTAGC|ACAGTCTCCTCT|ACAGTCTCCTCC|ACAGTCTCCTCA|ACAGTCTCCTCG|ACAGTCTCCAGT|ACAGTCTCCAGC|' \
    r'ACAGTCTCATCT|ACAGTCTCATCC|ACAGTCTCATCA|ACAGTCTCATCG|ACAGTCTCAAGT|ACAGTCTCAAGC|ACAGTCTCGTCT|ACAGTCTCGTCC|' \
    r'ACAGTCTCGTCA|ACAGTCTCGTCG|ACAGTCTCGAGT|ACAGTCTCGAGC|ACAGTCAGTTCT|ACAGTCAGTTCC|ACAGTCAGTTCA|ACAGTCAGTTCG|' \
    r'ACAGTCAGTAGT|ACAGTCAGTAGC|ACAGTCAGCTCT|ACAGTCAGCTCC|ACAGTCAGCTCA|ACAGTCAGCTCG|ACAGTCAGCAGT|ACAGTCAGCAGC|' \
    r'ACAGTATCTTCT|ACAGTATCTTCC|ACAGTATCTTCA|ACAGTATCTTCG|ACAGTATCTAGT|ACAGTATCTAGC|ACAGTATCCTCT|ACAGTATCCTCC|' \
    r'ACAGTATCCTCA|ACAGTATCCTCG|ACAGTATCCAGT|ACAGTATCCAGC|ACAGTATCATCT|ACAGTATCATCC|ACAGTATCATCA|ACAGTATCATCG|' \
    r'ACAGTATCAAGT|ACAGTATCAAGC|ACAGTATCGTCT|ACAGTATCGTCC|ACAGTATCGTCA|ACAGTATCGTCG|ACAGTATCGAGT|ACAGTATCGAGC|' \
    r'ACAGTAAGTTCT|ACAGTAAGTTCC|ACAGTAAGTTCA|ACAGTAAGTTCG|ACAGTAAGTAGT|ACAGTAAGTAGC|ACAGTAAGCTCT|ACAGTAAGCTCC|' \
    r'ACAGTAAGCTCA|ACAGTAAGCTCG|ACAGTAAGCAGT|ACAGTAAGCAGC|ACAGTGTCTTCT|ACAGTGTCTTCC|ACAGTGTCTTCA|ACAGTGTCTTCG|' \
    r'ACAGTGTCTAGT|ACAGTGTCTAGC|ACAGTGTCCTCT|ACAGTGTCCTCC|ACAGTGTCCTCA|ACAGTGTCCTCG|ACAGTGTCCAGT|ACAGTGTCCAGC|' \
    r'ACAGTGTCATCT|ACAGTGTCATCC|ACAGTGTCATCA|ACAGTGTCATCG|ACAGTGTCAAGT|ACAGTGTCAAGC|ACAGTGTCGTCT|ACAGTGTCGTCC|' \
    r'ACAGTGTCGTCA|ACAGTGTCGTCG|ACAGTGTCGAGT|ACAGTGTCGAGC|ACAGTGAGTTCT|ACAGTGAGTTCC|ACAGTGAGTTCA|ACAGTGAGTTCG|' \
    r'ACAGTGAGTAGT|ACAGTGAGTAGC|ACAGTGAGCTCT|ACAGTGAGCTCC|ACAGTGAGCTCA|ACAGTGAGCTCG|ACAGTGAGCAGT|ACAGTGAGCAGC|' \
    r'ACGGTTTCTTCT|ACGGTTTCTTCC|ACGGTTTCTTCA|ACGGTTTCTTCG|ACGGTTTCTAGT|ACGGTTTCTAGC|ACGGTTTCCTCT|ACGGTTTCCTCC|' \
    r'ACGGTTTCCTCA|ACGGTTTCCTCG|ACGGTTTCCAGT|ACGGTTTCCAGC|ACGGTTTCATCT|ACGGTTTCATCC|ACGGTTTCATCA|ACGGTTTCATCG|' \
    r'ACGGTTTCAAGT|ACGGTTTCAAGC|ACGGTTTCGTCT|ACGGTTTCGTCC|ACGGTTTCGTCA|ACGGTTTCGTCG|ACGGTTTCGAGT|ACGGTTTCGAGC|' \
    r'ACGGTTAGTTCT|ACGGTTAGTTCC|ACGGTTAGTTCA|ACGGTTAGTTCG|ACGGTTAGTAGT|ACGGTTAGTAGC|ACGGTTAGCTCT|ACGGTTAGCTCC|' \
    r'ACGGTTAGCTCA|ACGGTTAGCTCG|ACGGTTAGCAGT|ACGGTTAGCAGC|ACGGTCTCTTCT|ACGGTCTCTTCC|ACGGTCTCTTCA|ACGGTCTCTTCG|' \
    r'ACGGTCTCTAGT|ACGGTCTCTAGC|ACGGTCTCCTCT|ACGGTCTCCTCC|ACGGTCTCCTCA|ACGGTCTCCTCG|ACGGTCTCCAGT|ACGGTCTCCAGC|' \
    r'ACGGTCTCATCT|ACGGTCTCATCC|ACGGTCTCATCA|ACGGTCTCATCG|ACGGTCTCAAGT|ACGGTCTCAAGC|ACGGTCTCGTCT|ACGGTCTCGTCC|' \
    r'ACGGTCTCGTCA|ACGGTCTCGTCG|ACGGTCTCGAGT|ACGGTCTCGAGC|ACGGTCAGTTCT|ACGGTCAGTTCC|ACGGTCAGTTCA|ACGGTCAGTTCG|' \
    r'ACGGTCAGTAGT|ACGGTCAGTAGC|ACGGTCAGCTCT|ACGGTCAGCTCC|ACGGTCAGCTCA|ACGGTCAGCTCG|ACGGTCAGCAGT|ACGGTCAGCAGC|' \
    r'ACGGTATCTTCT|ACGGTATCTTCC|ACGGTATCTTCA|ACGGTATCTTCG|ACGGTATCTAGT|ACGGTATCTAGC|ACGGTATCCTCT|ACGGTATCCTCC|' \
    r'ACGGTATCCTCA|ACGGTATCCTCG|ACGGTATCCAGT|ACGGTATCCAGC|ACGGTATCATCT|ACGGTATCATCC|ACGGTATCATCA|ACGGTATCATCG|' \
    r'ACGGTATCAAGT|ACGGTATCAAGC|ACGGTATCGTCT|ACGGTATCGTCC|ACGGTATCGTCA|ACGGTATCGTCG|ACGGTATCGAGT|ACGGTATCGAGC|' \
    r'ACGGTAAGTTCT|ACGGTAAGTTCC|ACGGTAAGTTCA|ACGGTAAGTTCG|ACGGTAAGTAGT|ACGGTAAGTAGC|ACGGTAAGCTCT|ACGGTAAGCTCC|' \
    r'ACGGTAAGCTCA|ACGGTAAGCTCG|ACGGTAAGCAGT|ACGGTAAGCAGC|ACGGTGTCTTCT|ACGGTGTCTTCC|ACGGTGTCTTCA|ACGGTGTCTTCG|' \
    r'ACGGTGTCTAGT|ACGGTGTCTAGC|ACGGTGTCCTCT|ACGGTGTCCTCC|ACGGTGTCCTCA|ACGGTGTCCTCG|ACGGTGTCCAGT|ACGGTGTCCAGC|' \
    r'ACGGTGTCATCT|ACGGTGTCATCC|ACGGTGTCATCA|ACGGTGTCATCG|ACGGTGTCAAGT|ACGGTGTCAAGC|ACGGTGTCGTCT|ACGGTGTCGTCC|' \
    r'ACGGTGTCGTCA|ACGGTGTCGTCG|ACGGTGTCGAGT|ACGGTGTCGAGC|ACGGTGAGTTCT|ACGGTGAGTTCC|ACGGTGAGTTCA|ACGGTGAGTTCG|' \
    r'ACGGTGAGTAGT|ACGGTGAGTAGC|ACGGTGAGCTCT|ACGGTGAGCTCC|ACGGTGAGCTCA|ACGGTGAGCTCG|ACGGTGAGCAGT|ACGGTGAGCAGC)'

def read_fastq(file_handle):
    """Generator to read FASTQ file."""
    while True:
        headerline = file_handle.readline()
        if not headerline:
            break
        sequenceline = file_handle.readline()
        plusline = file_handle.readline()
        qualityline = file_handle.readline()
        yield (headerline.rstrip(), sequenceline.rstrip(), plusline.rstrip(), qualityline.rstrip())

def process_read(read):
    """Processes a single read."""
    headerline, sequenceline, _, _ = read
    result = {}
    dna = sequenceline.rstrip()

    # Find start sequence
    startseq_match = re.findall(startseq, dna)
    if startseq_match:
        startbase = dna.find(startseq_match[0])
        result['foundstart'] = 1
    else:
        startbase = -1
        result['foundstart'] = 0

    # Find end sequence
    endseq_match = re.findall(endseq, dna)
    if endseq_match:
        endbase = dna.find(endseq_match[0])
        result['foundend'] = 1
    else:
        endbase = -1
        result['foundend'] = 0

    if startbase == -1 or endbase == -1:
        result['status'] = 'nostartnoend'
        result['notfound'] = f"sequenza non trovata\t{dna}\n"
        return result

    targetregion = dna[startbase:endbase + 12]  # 12 is the length of the end sequence
    if len(targetregion) % 3 != 0:
        result['status'] = 'notinframe'
        result['nomultiple'] = f"{headerline}\t{dna}\t{startbase}\t{endbase}\t{targetregion}\n"
        return result

    # Translate the target region
    translated = translate(targetregion)
    if '*' in translated:
        result['status'] = 'withstop'
        return result

    result['status'] = 'passed'
    result['header'] = headerline
    result['translated'] = translated + "\n"
    return result

def process_reads(reads):
    """Processes a batch of reads."""
    return [process_read(read) for read in reads]

def main():
    with open(sys.argv[1], 'r') as filein, \
         open(sys.argv[2], 'w') as fileout, \
         open(sys.argv[2] + '.notfound', 'w') as notfound, \
         open(sys.argv[2] + '.log', 'w') as log, \
         open(sys.argv[2] + '.outframe', 'w') as nomultiplefile:

        readsread = 0
        readspassing = 0
        foundstart = 0
        foundend = 0
        notinframe = 0
        withstop = 0
        nostartnoend = 0

        batch_size = 1000
        batches = []
        batch = []

        # Read and batch the reads
        for read in read_fastq(filein):
            readsread += 1
            batch.append(read)
            if len(batch) == batch_size:
                batches.append(batch)
                batch = []
        if batch:
            batches.append(batch)

        # Process batches in parallel
        cpus = multiprocessing.cpu_count()
        pool = Pool(processes=cpus)
        results_list = pool.map(process_reads, batches)
        pool.close()
        pool.join()

        # Collect and write results
        for results in results_list:
            for result in results:
                if result['status'] == 'nostartnoend':
                    nostartnoend += 1
                    notfound.write(result['notfound'])
                elif result['status'] == 'notinframe':
                    notinframe += 1
                    nomultiplefile.write(result['nomultiple'])
                elif result['status'] == 'withstop':
                    withstop += 1
                elif result['status'] == 'passed':
                    readspassing += 1
                    fileout.write(result['header'] + '\n')
                    fileout.write(result['translated'])
                foundstart += result['foundstart']
                foundend += result['foundend']

        # Write log file
        log.write("Completed reading reads:\n")
        log.write(f"{readsread}\n")
        log.write("Of which passing and written into FASTA:\n")
        log.write(f"{readspassing}\n")
        log.write("start matched are\n")
        log.write(f"{foundstart}\n")
        log.write("end matched are\n")
        log.write(f"{foundend}\n")
        log.write("failed because missing start or missing end\n")
        log.write(f"{nostartnoend}\n")
        log.write("failed because not in frame, i.e. not multiple of 3\n")
        log.write(f"{notinframe}\n")
        log.write("failed because there is a stop codon in the sequence\n")
        log.write(f"{withstop}\n")

if __name__ == "__main__":
    main()
